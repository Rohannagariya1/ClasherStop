"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FormatLogBasic = void 0;
const winston_1 = require("winston");
const logFormat_enum_1 = require("./enums/logFormat.enum");
const GetJsonFormat_1 = require("./GetJsonFormat");
const GetTextFormat_1 = require("./GetTextFormat");
class FormatLogBasic {
    formatter(logFormat, logLevel) {
        const getJsonFormat = new GetJsonFormat_1.GetJsonFormat();
        const getTextFormat = new GetTextFormat_1.GetTextFormat();
        if (!logFormat) {
            logFormat = logFormat_enum_1.LogFormat.TEXT;
        }
        // we are using this filter to avoid the http logs in the application log
        const filterLevel = (level) => (0, winston_1.format)((info) => {
            return info.level === level ? false : info;
        })();
        const formatComponents = [
            winston_1.format.timestamp(),
        ];
        if (logLevel) {
            formatComponents.unshift(filterLevel(logLevel));
        }
        switch (logFormat) {
            case logFormat_enum_1.LogFormat.JSON:
                formatComponents.push(winston_1.format.printf((info) => getJsonFormat.formatLog(info)));
                break;
            case logFormat_enum_1.LogFormat.TEXT:
                formatComponents.push(winston_1.format.printf((info) => getTextFormat.formatLog(info)));
                break;
            default:
                throw new Error("Unsupported Log Format: " + logFormat);
        }
        const loggerFormat = winston_1.format.combine(...formatComponents);
        return loggerFormat;
    }
}
exports.FormatLogBasic = FormatLogBasic;
