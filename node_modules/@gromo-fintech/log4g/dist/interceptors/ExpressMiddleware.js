"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExpressMiddleware = void 0;
const MetaDataHelper_1 = require("./MetaDataHelper");
const ContextStorage_1 = require("./ContextStorage");
const os = require('os');
const GroMoLogger_1 = __importDefault(require("../logger/GroMoLogger"));
/**
 * Extract these information from the request:
 * requester ip
 * host ip
 * uri path
 * trace id
 * response time
 * API method name
 */
class ExpressMiddleware {
    constructor() {
        this.requestMiddleware = (req, res, next) => {
            var _a;
            const start = Date.now();
            // Extract requester IP address
            const requesterIP = ((_a = req.ip) === null || _a === void 0 ? void 0 : _a.toString()) || '';
            // Extract host IP
            const networkInterfaces = os.networkInterfaces();
            const extractedIPs = MetaDataHelper_1.metaDataHelper.extractIP(networkInterfaces);
            const IPAddress = JSON.stringify(extractedIPs);
            // Extract URI path
            const uriPath = req.path;
            // Extract Trace-id
            const traceId = req.headers['trace-id'] || MetaDataHelper_1.metaDataHelper.generateTraceId();
            req.headers['trace-id'] = traceId;
            // Method name
            const method = req.method;
            res.once('finish', () => {
                const end = Date.now();
                const responseTime = end - start;
                const statusCode = res.statusCode;
                GroMoLogger_1.default.http(`[${method}] ${uriPath} - ${responseTime}ms - IP: ${requesterIP} - responseCode: ${statusCode}`);
            });
            res.once('error', (error) => {
                const end = Date.now();
                const responseTime = end - start;
                const statusCode = res.statusCode;
                GroMoLogger_1.default.http(`[${method}] ${uriPath} - ${responseTime}ms - IP: ${requesterIP} - responseCode: ${statusCode} - Error: ${error.message}`);
            });
            ContextStorage_1.asyncLocalStorage.run({ traceId, IPAddress, requesterIP, uriPath, method }, () => {
                next();
            });
        };
    }
}
exports.ExpressMiddleware = ExpressMiddleware;
