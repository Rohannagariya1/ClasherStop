"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FastifyMiddleware = void 0;
const os = require('os');
const GroMoLogger_1 = __importDefault(require("../logger/GroMoLogger"));
const MetaDataHelper_1 = require("./MetaDataHelper");
const ContextStorage_1 = require("./ContextStorage");
class FastifyMiddleware {
    constructor() {
        this.requestMiddleware = (request, reply, done) => {
            var _a, _b;
            // Extract requester IP address
            const requesterIP = request.ip;
            // Extract host IP
            const networkInterfaces = os.networkInterfaces();
            const extractedIPs = MetaDataHelper_1.metaDataHelper.extractIP(networkInterfaces);
            const IPAddress = JSON.stringify(extractedIPs);
            // Extract URI path
            const uriPath = request.url ? request.url : (_a = request.req) === null || _a === void 0 ? void 0 : _a.url;
            // Extract Trace-id
            const traceId = request.headers['trace-id'] || MetaDataHelper_1.metaDataHelper.generateTraceId();
            request.headers['trace-id'] = traceId;
            // Method name
            const method = request.method ? request.method : (_b = request.req) === null || _b === void 0 ? void 0 : _b.method;
            ContextStorage_1.asyncLocalStorage.run({ traceId, IPAddress, requesterIP, uriPath, method }, () => {
                done();
            });
        };
        this.responseMiddleware = (request, reply, done) => {
            const responseTime = reply.elapsedTime ? reply.elapsedTime : reply.getResponseTime();
            // meta data from AsyncLocalStorage
            const logContext = ContextStorage_1.asyncLocalStorage.getStore();
            const requesterIP = logContext === null || logContext === void 0 ? void 0 : logContext.requesterIP;
            const uriPath = logContext === null || logContext === void 0 ? void 0 : logContext.uriPath;
            const method = logContext === null || logContext === void 0 ? void 0 : logContext.method;
            const statusCode = reply.statusCode;
            GroMoLogger_1.default.http(`[${method}] ${uriPath} - ${responseTime}ms - IP: ${requesterIP} - responseCode: ${statusCode}`);
            done();
        };
        this.errorMiddleware = (request, reply, error, done) => {
            const responseTime = reply.elapsedTime ? reply.elapsedTime : reply.getResponseTime();
            // meta data from AsyncLocalStorage
            const logContext = ContextStorage_1.asyncLocalStorage.getStore();
            const requesterIP = logContext === null || logContext === void 0 ? void 0 : logContext.requesterIP;
            const uriPath = logContext === null || logContext === void 0 ? void 0 : logContext.uriPath;
            const method = logContext === null || logContext === void 0 ? void 0 : logContext.method;
            const statusCode = reply.statusCode;
            GroMoLogger_1.default.http(`[${method}] ${uriPath} - ${responseTime}ms - IP: ${requesterIP} - responseCode: ${statusCode} - Error: ${error.message}`);
            done();
        };
    }
}
exports.FastifyMiddleware = FastifyMiddleware;
