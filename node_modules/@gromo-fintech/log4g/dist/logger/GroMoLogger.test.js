"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const GroMoLogger_1 = __importDefault(require("./GroMoLogger"));
const TransporterType_enum_1 = require("../transport-config/enums/TransporterType.enum");
const LogLevel_enum_1 = require("./enums/LogLevel.enum");
const logFormat_enum_1 = require("../formatter/enums/logFormat.enum");
const winston_1 = __importDefault(require("winston"));
const fs = require('fs');
const util = require('util');
const readFile = util.promisify(fs.readFile);
describe('GroMoLogger', () => {
    let spyLog;
    beforeEach(() => {
        GroMoLogger_1.default.setConfig({
            enableStdout: true,
            nameOfProject: "testing",
            fileOptions: {
                enableFile: true,
                logLevel: LogLevel_enum_1.LogLevel.INFO,
                datePattern: 'DD-MM-YYYY',
                zippedArchive: false,
                maxSize: '10k',
                maxDuration: '1d'
            },
            logLevel: LogLevel_enum_1.LogLevel.DEBUG,
            logFormat: logFormat_enum_1.LogFormat.TEXT,
            transporterType: TransporterType_enum_1.TransporterType.SINGLE_FILE,
            overrideConsole: false,
            enableAccessLog: true
        });
    });
    afterEach(() => {
    });
    it('logs a simple info message', () => {
        const spy = jest.spyOn(GroMoLogger_1.default, 'info');
        GroMoLogger_1.default.info("Hello, world!");
        expect(spy).toHaveBeenCalledWith("Hello, world!");
    });
    it('logs a simple warn message', () => {
        const spy = jest.spyOn(GroMoLogger_1.default, 'warn');
        GroMoLogger_1.default.warn("Hello, world!");
        expect(spy).toHaveBeenCalledWith("Hello, world!");
    });
    it('logs a simple error message', () => {
        const spy = jest.spyOn(GroMoLogger_1.default, 'error');
        GroMoLogger_1.default.error("Hello, world!");
        expect(spy).toHaveBeenCalledWith("Hello, world!");
    });
    it('logs a simple debug message', () => {
        const spy = jest.spyOn(GroMoLogger_1.default, 'debug');
        GroMoLogger_1.default.debug("Hello, world!");
        expect(spy).toHaveBeenCalledWith("Hello, world!");
    });
    it('logs a simple http message', () => {
        const spy = jest.spyOn(GroMoLogger_1.default, 'http');
        GroMoLogger_1.default.http("Hello, world!");
        expect(spy).toHaveBeenCalledWith("Hello, world!");
    });
    it('logs a simple verbose message', () => {
        const spy = jest.spyOn(GroMoLogger_1.default, 'verbose');
        GroMoLogger_1.default.verbose("Hello, world!");
        expect(spy).toHaveBeenCalledWith("Hello, world!");
    });
});
// checks if the config is set properly 
it('Set custom config', () => {
    const options = {
        enableStdout: true,
        nameOfProject: "TestProject",
        fileOptions: {
            enableFile: true,
            logLevel: LogLevel_enum_1.LogLevel.INFO,
            datePattern: 'DD-MM-YYYY',
            zippedArchive: false,
            maxSize: '10k',
            maxDuration: '1d'
        },
        logLevel: LogLevel_enum_1.LogLevel.ERROR,
        logFormat: logFormat_enum_1.LogFormat.TEXT,
        transporterType: TransporterType_enum_1.TransporterType.SINGLE_FILE,
        overrideConsole: false,
        enableAccessLog: true
    };
    if (GroMoLogger_1.default.logger) {
        GroMoLogger_1.default.setConfig(options);
        GroMoLogger_1.default.logger.transports.forEach(transport => {
            if (transport instanceof winston_1.default.transports.File) {
                expect(transport.filename).toContain(`TestProject`);
            }
        });
        expect(GroMoLogger_1.default.logger.level).toBe('error');
        expect(console.log).not.toBe(undefined);
    }
});
//if we disable all the logging method than log method wont be called
test('does not log when logging is disabled', () => {
    const options = {
        enableStdout: false,
        nameOfProject: "TestProject",
        fileOptions: {
            enableFile: false,
            logLevel: LogLevel_enum_1.LogLevel.INFO,
            datePattern: 'DD-MM-YYYY',
            zippedArchive: false,
            maxSize: '10k',
            maxDuration: '1d'
        },
        logLevel: LogLevel_enum_1.LogLevel.ERROR,
        logFormat: logFormat_enum_1.LogFormat.TEXT,
        transporterType: TransporterType_enum_1.TransporterType.SINGLE_FILE,
        overrideConsole: false,
        enableAccessLog: false
    };
    if (GroMoLogger_1.default.logger) {
        GroMoLogger_1.default.setConfig(options);
        jest.spyOn(GroMoLogger_1.default.logger, 'log');
        GroMoLogger_1.default.info('should not log this');
        expect(GroMoLogger_1.default.logger.log).not.toHaveBeenCalled();
    }
});
