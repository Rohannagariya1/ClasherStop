"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InputHandler = void 0;
const GroMoLogger_1 = __importDefault(require("./GroMoLogger"));
const util_1 = require("util"); // or directly
class InputHandler {
    processArgs(args) {
        let error;
        //The acc parameter is the accumulator, and the arg parameter is the current value. 
        //In this case, the accumulator is the stringifiedArgs array, and the current value is the arg variable.
        const stringifiedArgs = args.reduce((acc, arg) => {
            if (arg instanceof Error) {
                // Capture the first Error encountered and ignore others if multiple are present
                if (!error)
                    error = arg;
            }
            else if (typeof arg === 'object') {
                try {
                    const obj = (0, util_1.inspect)(arg);
                    // Attempt to stringify the object
                    acc.push(JSON.stringify(obj));
                }
                catch (e) {
                    if (e instanceof TypeError) {
                        // Log the error and push a placeholder or error description
                        if (typeof (e === null || e === void 0 ? void 0 : e.message) === 'string') {
                            GroMoLogger_1.default.error("Error serializing object:", e.message);
                        }
                        acc.push("[Serialization Error]");
                    }
                    else {
                        // For any other type of error, rethrow it
                        if (typeof (e === null || e === void 0 ? void 0 : e.message) === 'string') {
                            GroMoLogger_1.default.error("Error in logging this object", e === null || e === void 0 ? void 0 : e.message);
                        }
                        acc.push("[Unknown Error]");
                    }
                }
            }
            else {
                // Convert non-objects to string directly
                try {
                    acc.push(String(arg));
                }
                catch (e) {
                    GroMoLogger_1.default.error("Error in printing object:", e.message);
                }
            }
            return acc;
        }, []);
        let id = '';
        let context = '';
        if ((args === null || args === void 0 ? void 0 : args.length) && (args === null || args === void 0 ? void 0 : args.length) >= 3) {
            id = stringifiedArgs.pop() || '';
            context = stringifiedArgs.pop() || '';
        }
        const message = stringifiedArgs.join(' ');
        return { message, context, id, error };
    }
}
exports.InputHandler = InputHandler;
